
---
name: Test roles and modules with galaxy_ng on oci-env

on:
  workflow_call:
    inputs:
      galaxy_ng_version:
        description: The version to pull of galaxy_ng
        required: true
        type: string
      gh_ref:
        description: The ref in the repository to pull
        required: false
        default: devel
        type: string
    secrets:
      redhat_catalog_username:
        description: Username for Red Hat Catalog
        required: true
      redhat_catalog_password:
        description: Password for Red Hat Catalog
        required: true

jobs:
  integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.gh_ref }}

      - name: Checkout galaxy_ng
        uses: actions/checkout@v4
        with:
          repository: ansible/galaxy_ng
          path: galaxy_ng
          ref: ${{ inputs.galaxy_ng_version }}

      - name: Checkout oci_env
        uses: actions/checkout@v4
        with:
          repository: pulp/oci_env
          path: oci_env

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: setup oci-env
        run: |
          pip install -e client
        working-directory: oci_env

      - name: setup node
        run: |
          wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
          npm install 18

      # Note: COMPOSE_INTERACTIVE_NO_CLI=1 is required for oci-env to work correctly when there's no interactive terminal
      - name: Set environment variables
        run: |
          export OCI_ENV_PATH=$(dirname $(pip show oci-env | grep -e ^Location | awk '{print $2}'))
          export COMPOSE_BINARY=docker
          echo "COMPOSE_INTERACTIVE_NO_CLI=1" >> $GITHUB_ENV
          echo "OCI_VERBOSE=1" >> $GITHUB_ENV
          echo "GH_DUMP_LOGS=1" >> $GITHUB_ENV
      - name: Update apt
        run: sudo apt -y update

      - name: Install LDAP requirements
        run: sudo apt-get install -y libsasl2-dev python3 libldap2-dev libssl-dev build-essential

      - name: edit file size for nginx
        run: |
          mv .github/files/nginx.conf galaxy_ng/galaxy_ng/app/webserver_snippets/
          cat galaxy_ng/galaxy_ng/app/webserver_snippets/nginx.conf

      - name: build stack
        working-directory: galaxy_ng
        run: |
          env_path=dev/oci_env_integration/oci_env_configs/standalone.compose.env
          oci-env -e ${env_path} compose build --progress=plain
          oci-env -e ${env_path} compose up -d

      - name: give stack some time to spin up
        run: sleep 120

      - name: Move ansible.cfg to root
        run: mv .github/files/ansible.cfg .

      - name: Build and install the collection
        id: build
        uses: redhat-cop/ansible_collections_tooling/actions/build_ansible_collection@main
        with:
          collection_namespace: galaxy
          collection_name: galaxy
          collection_version: 1.0.0
          collection_repo: https://github.com/ansible/galaxy_collection

      - name: ls
        run: |
          ls
          pwd

      - name: Show Ports
        run: |
          sudo netstat -ntlp
          docker container ls --format "table {{.ID}}\t{{.Names}}\t{{.Ports}}" -a

      - name: "Perform playbook collection tests"
        run: ansible-playbook tests/playbooks/testing_collections_playbook.yml -v -e galaxy_ng_version=${{ inputs.galaxy_ng_version }} -e git_repo_name=${{ github.event.repository.name }} -v

      - name: "Perform collection repository tests"
        run: ansible-playbook tests/playbooks/testing_collections_repos.yml -v -e galaxy_ng_version=${{ inputs.galaxy_ng_version }}

      - name: "Perform playbook repository tests"
        run: ansible-playbook tests/playbooks/testing_playbook_ee_repository.yml -vv -e galaxy_ng_version=${{ inputs.galaxy_ng_version }} -e redhat_catalog_username=${{ secrets.redhat_catalog_username }} -e redhat_catalog_password=${{ secrets.redhat_catalog_password }}

      - name: "Perform playbook user and group management tests"
        run: ansible-playbook tests/playbooks/testing_playbook_user.yml -v -e galaxy_ng_version=${{ inputs.galaxy_ng_version }}
...
